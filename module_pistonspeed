public void Main(string argument, UpdateType updateSource)
        {
            //ARGUMENTS SEPARATED BY ;
            //IF LAST ARGUMENT IS 'PRINT', IT PRINTS OUT THE LIST OF ARGS, FOR DEBUGGING
            //FIRST ARGUMENT IS THE REFERENCE FOR WHICH FUNCTION WE WANT TO CALL
            //FOLLOWING ARGUMENTS ARE THE ARGUMENTS FOR THE FUNCTION WE ARE CALLING

            char[] separator = { ';' };
            string[] args = argument.Split(separator);


            
            //PRINTS THE LIST OF ARGS
            
            Echo("Function Call:");
            Echo(args[0]);
            Echo("Arguments:");
            string[] printargs = args.Except(new string[] { args[0] }).ToArray();
            foreach (string astring in printargs)
            {
                Echo(astring);
            }
            string functioncall = args[0];
            string[] functionargs = args.Except(new string[] { args[0]}).ToArray();

            switch(functioncall)
            {
                case "default":
                    defaultfunction(functionargs);
                    break;
                case "pistonspeed":
                    piston_speed_control(functionargs);
                    break;
                default:
                    break;
            }
        }

        void defaultfunction(string[] args)
        {
            Echo(args.Length.ToString());
        }

        //ARG 0 PISTON GROUP NAME
        //ARG 1 PISTON SPEED
        //SETS THE SPEED OF ALL PISTONS IN THE PISTON GROUP TO THE REQUESTED PISTON SPEED
        void piston_speed_control(string[] args)
        {
            string pistongroupname = args[0];
            string pistonspeed = args[1];
            var pistons = GridTerminalSystem.GetBlockGroupWithName(pistongroupname);
            List<IMyTerminalBlock> pistonblocks = new List<IMyTerminalBlock>();

            pistons.GetBlocks(pistonblocks);

            float speed = float.Parse(pistonspeed);
            foreach (IMyTerminalBlock ablock in pistonblocks)
            {
                IMyPistonBase apiston = ablock as IMyPistonBase;
                apiston.Velocity = speed;
            }
        }
